#!/bin/sh
# Copyright (c) 2000-2014 Synology Inc. All rights reserved.

echo "START /linuxrc.syno"

. /etc.defaults/rc.subr

Mnt="/tmpRoot"
DataMnt="/tmpData"
TmpMnt="/mnt"

/bin/mkdir ${Mnt}
/bin/mount /proc
/bin/mount /sys

SYNOINFO_DEF="/etc.defaults/synoinfo.conf"
UniqueRD=`/bin/get_key_value $SYNOINFO_DEF unique | cut -d"_" -f2`
MaxDisks=`/bin/get_key_value $SYNOINFO_DEF maxdisks`
MaxSysDisks=`/bin/get_key_value $SYNOINFO_DEF max_sys_raid_disks`
AUTO_INSTALL=`/bin/get_key_value $SYNOINFO_DEF support_auto_install`
SFDISK="/sbin/sfdisk"
TarUpgradeFileName="SynoUpgrade.tar"
MMCBLK0="/sys/block/mmcblk0"
EmmcBoot=`/bin/get_key_value /etc.defaults/synoinfo.conf support_emmc_boot`
USB_MODULES="usb-common usbcore ohci-hcd uhci-hcd ehci-hcd xhci-hcd"
USB_MODULES="${USB_MODULES} etxhci-hcd" # for Etron USB3.0
SupportDualhead=`/bin/get_key_value $SYNOINFO_DEF support_dual_head`

Exit()
{
	if [ -n "$2" ]; then
		echo "Exit on error [$1] $2..."
	fi

	# show date for login info
	date

	grep "^${RootDevice}" /proc/mounts && /bin/umount -f ${Mnt}
	grep "sysfs" /proc/mounts && /bin/umount /sys
	grep "^/proc" /proc/mounts && /bin/umount /proc
	exit $1
}

# insert basic USB modules for detect f401/FDT
echo "Insert basic USB modules..."
SYNOLoadModules $USB_MODULES

if [ -x /usr/syno/bin/synocfgen ]; then
        insmod /lib/modules/synobios.*
        /bin/mknod /dev/synobios c 201 0
        echo "Starting /usr/syno/bin/synocfgen..."
        /usr/syno/bin/synocfgen
        RetCfg=$?
        echo "/usr/syno/bin/synocfgen returns $RetCfg"
        rmmod `/sbin/lsmod | /usr/bin/cut -f 1 -d ' ' | /bin/grep synobios`
fi

if [ "$SupportDualhead" = "yes" ]; then
	# Run HA script
	/etc.defaults/AHAtasks check_stage
	AHAResult=$?
	if [ 0 -ne $AHAResult ]; then
		Exit 128 "======= AHARESULT return $AHAResult, go into junior mode ======="
	fi
fi

####################################################

SupportRAID=`/bin/get_key_value /etc/synoinfo.conf supportraid`
DefFS=`/bin/get_key_value /etc/synoinfo.conf defaultfs`
FSCK="/sbin/e2fsck"
FsckFailed=0

SYNOGenAllDeviceNodes()
{
	local devnodes=`/bin/cat /proc/partitions | grep -v "#" | cut -c 26-`
	for devnode in ${devnodes}
	do
		if [ -z "${devnode}" ]; then
			continue;
		fi

		local major=`/bin/cat /proc/partitions | grep "${devnode}$" | cut -c -4`
		local minor=`/bin/cat /proc/partitions | grep "${devnode}$" | cut -c 5-13`
		if [ -b /dev/${devnode} ]; then
			rm /dev/${devnode}
		fi
		mknod /dev/${devnode} b $major $minor
	done
}

support_emmc_boot()
{
	local emmc_boot
	emmc_boot=`/bin/get_key_value $SYNOINFO_DEF support_emmc_boot`
	if [ "xyes" = "x$emmc_boot" ]; then
		return 0;
	else
		return 1;
	fi
}

create_mmc_dev()
{
	# remove to-be faked device: sdaX / hdaX
	/bin/rm -f /dev/sda
	/bin/rm -f /dev/hda
	for i in $(seq 15); do
		/bin/rm -f /dev/sda${i};
		/bin/rm -f /dev/hda${i};
	done

	# wait device probe done */
	local _count=0;
	while [ ! -e ${MMCBLK0} ]; do
		# wait most 10 seconds
		if [ $_count -ge 10 ]; then
			echo "eMMC device failed.";
			return 1;
		fi

		echo "wait 1 second for eMMC device ready..."
		sleep 1;
		_count=$((_count + 1))
	done

	# creat faked sdaX / hdaX, also mmcblk0
	source ${MMCBLK0}/uevent;
	/bin/mknod /dev/sda b ${MAJOR} ${MINOR}
	/bin/mknod /dev/hda b ${MAJOR} ${MINOR}
	/bin/mknod /dev/mmcblk0 b ${MAJOR} ${MINOR}
	for i in $(seq 4); do
		/bin/mknod /dev/sda${i} b ${MAJOR} $((MINOR + i))
		/bin/mknod /dev/hda${i} b ${MAJOR} $((MINOR + i))
		/bin/mknod /dev/mmcblk0p${i} b ${MAJOR} $((MINOR + i))
	done
}

if [ "x" != "x`/bin/get_key_value /etc.defaults/synoinfo.conf unique | grep comcerto2k`" ]; then
	. /etc.defaults/rc.mindspeed para_init
fi

SupportSAS=`/bin/get_key_value /etc.defaults/synoinfo.conf supportsas`
if [ "$SupportSAS" = "yes" ]; then
	SYNOGenAllDeviceNodes
elif support_emmc_boot; then
	create_mmc_dev
fi

if [ "$SupportDualhead" = "yes" ]; then
	RootDevice=/dev/md0
	SwapDevice=/dev/md1
	ProcDiskList=`/usr/syno/bin/synodiskport -eunit 2>/dev/null`
elif [ "$SupportRAID" = "yes" ]; then
	RootDevice=/dev/md0
	ProcDiskList=`/usr/syno/bin/synodiskport -internal 2>/dev/null`
else
	RootDevice=/dev/hda1
	ProcDiskList=`/usr/syno/bin/synodiskport -internal 2>/dev/null`
fi

AutoInstall()
{
	if [ "yes" = "${EmmcBoot}" ]; then
		/bin/umount ${Mnt}
		/sbin/mkfs.ext4 -E discard /dev/sda1
		/sbin/mkfs.ext4 -E discard /dev/sda3
		FsckFailed=0

		/bin/mkdir ${DataMnt}
		/bin/mount /dev/sda1 ${Mnt}
		/bin/mount /dev/sda3 ${DataMnt}
		/bin/mount /dev/sda4 ${TmpMnt}
		/bin/cp ${TmpMnt}/hda1.tgz ${DataMnt}/${TarUpgradeFileName}
		/bin/cp ${TmpMnt}/indexdb.tgz ${DataMnt}/SynoUpgradeIndexdb.tgz
		/bin/cp ${TmpMnt}/synohdpack_img.tgz ${DataMnt}/SynoUpgradeSynohdpackImg.tgz

		/bin/umount ${DataMnt}
		/bin/umount ${TmpMnt}
	fi
}

Ret=0

#
# check if disk is installed
#
if [ "0" != "${MaxDisks}" -a "x" = "x${ProcDiskList}" ]; then
        touch /.nodisk
        Exit 1 "DISK NOT INSTALLED"
fi

#
# if we use initramfs, it will not pass kernel md autodetect path,
# so we need to assemble md0 now.
#
if [ "$SupportDualhead" = "yes" ]; then
	MD_UUID_PATH=/dual_glibc/`/usr/sbin/chroot /dual_glibc /usr/syno/synoaha/bin/synoahastr --md-uuid-path`
	if [ -f "$MD_UUID_PATH" ]; then
		# for dualhead, it must support sas disk
		# it means the device node will be /dev/sasX
		mdadm -A --run $RootDevice -u `/bin/get_key_value $MD_UUID_PATH md0` /dev/sas* > /dev/null 2>&1
		mdadm -A --run $SwapDevice -u `/bin/get_key_value $MD_UUID_PATH md1` /dev/sas* > /dev/null 2>&1
	fi
else
	if [ ! -d /sys/block/md0 -a "$SupportRAID" = "yes" ]; then
		mdadm --auto-detect
	fi
fi

#
# check if the partition match the format
#

CheckPartition()
{
	#
	# check if the partition match the format
	#
	/usr/syno/bin/synocheckpartition
	RetPartition=$?
	echo "Partition Version=${RetPartition}"

	ExecFsck=1
	if [ ${RetPartition} -eq 0 ]; then
		echo "Partition layout is not DiskStation style."
		echo "NOT EXECUTE ${FSCK}."
		ExecFsck=0
	fi
}

CheckRootFs()
{
	if [ -x ${FSCK} -a ${ExecFsck} -eq 1 ]; then
		echo " ${FSCK} exists, checking ${RootDevice}... "
		# This options for ext3 only now
		${FSCK} -pvf -C 0 ${RootDevice}
		ResFSCK=$?
		echo "${FSCK} returns ${ResFSCK}"
		case "$ResFSCK" in
		4 | 8)
			echo "${FSCK} returns ${ResFSCK}, move into network install..."
            FsckFailed=1;
		;;
		esac
	fi
}

CheckIfNeedToAutoInstall()
{
	if [ ${FsckFailed} -eq 1 ]; then
		echo "FSCK Failed, do auto install"
		AutoInstall
	elif [ -f ${Mnt}/.restore_to_default ]; then
		echo ".restore_to_default, do auto install"
		AutoInstall
	elif [ -f ${Mnt}/.system_crashed ]; then
		echo ".system_crashed exists, do auto install"
		AutoInstall
	elif [ -f ${Mnt}/.noroot ]; then
		echo ".noroot exists, do auto install"
		AutoInstall
	elif [ ! -x ${Mnt}/sbin/init ]; then
		echo "init does not exist, do auto install"
		AutoInstall
	fi
}

if [ "0" != "${MaxDisks}" -o -n "${MaxSysDisks}" ]; then
	CheckPartition
fi

CheckRootFs

echo "Mounting ${RootDevice} ${Mnt}"
if ! /bin/mount ${RootDevice} ${Mnt}; then
	echo "mount ${RootDevice} fail, returns ${ResMOUNT}"
	FsckFailed=1;
fi

FileList=`echo ${Mnt}/lost+found/#*`
if [ ${FileList} != "${Mnt}/lost+found/#*" ]; then
	echo "${RootDevice} had lost+found files"
	FsckFailed=1;
fi

if [ "yes" = "${AUTO_INSTALL}" ]; then
	CheckIfNeedToAutoInstall
fi

#
# check if upgrade
#
if [ 0 -eq $FsckFailed ]; then
    echo '------------upgrade'
    /bin/sh /etc/upgrade.sh
    echo '============upgrade'
fi

# if support SSD cache, then check if md0 is built only from SSD, if yes, boot into junior flash
SupportSSDCache=`/bin/get_key_value /etc.defaults/synoinfo.conf support_ssd_cache`
if [ "$SupportDualhead" != "yes" -a "${SupportSSDCache}" = "yes" -a -d "/sys/block/md0" ]; then
	WithInternal=0
	md0disks=`ls /sys/block/md0/md/ | grep dev- | cut -c 5-`
	# check if any disk is INTERNAL, otherwise return fail
	for disk in ${md0disks}
	do
		PortType=`/usr/syno/bin/synodiskport -portcheck "${disk}"`
		if [ "${PortType}" = "SAS" -o "${PortType}" = "SATA" ]; then
			WithInternal=1
		fi
	done
	# has raid0 and not composed by internal disk
	if [ -n "${md0disks}" -a ${WithInternal} -eq 0 ]; then
		echo "System volume is assembled with SSD Cache only, please remove SSD Cache and then reboot" >> /var/log/messages
		Exit 8 "System volume is assembled with SSD Cache only"
	fi
fi

if [ ! -d ${Mnt}/etc ]; then
	echo 'Copy default /etc'
	rm -rf ${Mnt}/etc
	cp -R ${Mnt}/etc.defaults ${Mnt}/etc
fi
if [ ! -d ${Mnt}/usr/syno/etc ]; then
	echo 'Copy default /usr/syno/etc'
	rm -rf ${Mnt}/usr/syno/etc
	cp -R ${Mnt}/usr/syno/etc.defaults ${Mnt}/usr/syno/etc
fi
if [ ! -d ${Mnt}/var ]; then
	echo 'Copy default /var'
	rm -rf ${Mnt}/var
	cp -R ${Mnt}/var.defaults ${Mnt}/var
fi

if [ -f ${Mnt}/.noroot ]; then
	if [ -f ${Mnt}/.restore_to_default ]; then
		touch /.force_clean_all_disk
	fi
	Exit 2 ".noroot exists"
fi

if [ -f ${Mnt}/.autoinstall_noroot ]; then
	Exit 2 ".autoinstall_noroot exists"
fi

if [ ! -x ${Mnt}/sbin/init ]; then
	Exit 3 "no init exists"
fi

if [ -f ${Mnt}/.memtest ]; then
	mv ${Mnt}/.memtest /.memtest
	Exit 4 ".memtest exists"
fi

UniqueFlash=`/bin/get_key_value /etc/synoinfo.conf unique`
UniqueHD=`/bin/get_key_value ${Mnt}/etc.defaults/synoinfo.conf unique`

if [ "$UniqueFlash" != "$UniqueHD" ]; then
	Exit 4 "Unique not match"
fi

VersionFlash=`/bin/get_key_value /etc.defaults/VERSION buildnumber`
VersionHD=`/bin/get_key_value ${Mnt}/etc.defaults/VERSION buildnumber`

if [ "$VersionFlash" != "$VersionHD" ]; then
	Exit 7 "Version number not match"
fi

if [ 1 -eq $FsckFailed ]; then
	Exit 5 "${RootDevice} fsck fail or had lost\+found files"
fi

echo "Wait 2 seconds for synology manufactory device"
sleep 2
if detect_manufactory_device; then
	Exit 8 "Manufactory device detected."
fi

rm -rf ${Mnt}/tmp ${Mnt}/var/tmp
mkdir -p ${Mnt}/tmp ${Mnt}/var/tmp
chmod 755 ${Mnt}/var
chmod 777 ${Mnt}/tmp ${Mnt}/var/tmp
rm -rf ${Mnt}/usr/syno/etc/rc.d
ln -s /usr/syno/etc.defaults/rc.d ${Mnt}/usr/syno/etc/rc.d
rm -rf ${Mnt}/usr/syno/etc/rc.sysv
ln -s /usr/syno/etc.defaults/rc.sysv ${Mnt}/usr/syno/etc/rc.sysv

Exit $Ret
